const { Client } = require("pg")



const pgErrorHandler = (code, fn, continuation) => err =>
{
    if (err.code !== code)
    {
        if (continuation) // is a function
        {
            return continuation(err)
        }
        else
        {
            // panic AF
            console.log(err);
            console.error("PANIC!!!!");
        }
    }

    return fn();
}

const pgErrorPanicOnFailure = pgErrorHandler("")
const recoverFromMissingTable = (cursor, fn, continuation) => 
    pgErrorHandler("42P01", async () =>
    {
        await cursor.query(`
            CREATE TABLE kv
            (
               id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
               key character varying(255) NOT NULL UNIQUE, 
               value character varying(255) NOT NULL
            );

            ALTER TABLE kv OWNER TO postgres;
            `)

        return fn()
    }, continuation)

class KV
{
    constructor()
    {
    }

    async init()
    {
        // TODO: load queries from SQL files
    }

    async get(key)
    {
        const client = new Client()
        await client.connect()
            .catch(pgErrorPanicOnFailure);

        const DBResponse = await client.query(`SELECT value FROM kv WHERE key like '${key}'`)
            .catch(recoverFromMissingTable(client, async () => {
                return await client.query(`SELECT value FROM kv WHERE key like '${key}'`)
            }))

        const value = DBResponse.rows[0] ?
            DBResponse.rows[0].value
            : null

        await client.end()
        return value
    }

    async set(k, v)
    {
        const client = new Client()
        await client.connect()
            .catch(pgErrorPanicOnFailure);
            
        await client.query(`insert into kv (key, value) values ('${k}', '${v}')`)
            .catch(recoverFromMissingTable(client, async () => {
                await client.query(`insert into kv (key, value) values ('${k}', '${v}')`)
            }, pgErrorHandler("23505", async () => { // update if key already existis
                await client.query(`UPDATE kv SET value= '${v}' where key = '${k}'`)
            })))

        await client.end()
    }

    async teardown()
    {

    }
}

module.exports = KV;
