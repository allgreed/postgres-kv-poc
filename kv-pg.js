const { Client } = require("pg")


const makeQueryRunner = initializedCursor =>
    (query, queryParameters) =>
{
    return initializedCursor.query(query, queryParameters || []);
}

const makeErrorHandler = handlers =>
    err =>
{
    for (const handler of handlers)
    {
        if (err.code !== handler.code)
        {
            continue
        }
        else
        {
            return handler.action()
        }
    }

    consle.error(`Unhandled error: ${err.code}`);
    console.error(err.stack);

    consle.error("exiting!");
    // TODO: exit for real xD
}

const create_table_query = `CREATE TABLE kv
            (
               id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
               key character varying(255) NOT NULL UNIQUE, 
               value character varying(255) NOT NULL
            );

            ALTER TABLE kv OWNER TO postgres`
            ;

class KV
{
    constructor()
    {
    }

    async init()
    {
        // TODO: load queries from SQL files
    }

    async get(key)
    {
        const client = new Client()
        await client.connect()
            //.catch(fatalError);

        const runQuery = makeQueryRunner(client);

        const recoverFromMissingTableAndThen = continuation =>
        ({
            code: "42P01",
            action: () => runQuery(create_table_query).then(continuation),
        })

        const select_query = `SELECT value FROM kv WHERE key like '${key}'`


        const DBResponse = await runQuery(select_query)
            .catch(makeErrorHandler([
                recoverFromMissingTableAndThen(() => runQuery(select_query)),
            ]))

        const value = DBResponse.rows[0] ?
            DBResponse.rows[0].value
            : null

        await client.end()
        return value
    }

    async set(k, v)
    {
        const client = new Client()
        await client.connect()
            //.catch(pgErrorPanicOnFailure);
        
        const runQuery = makeQueryRunner(client);
            
        const recoverFromMissingTableAndThen = continuation =>
        ({
            code: "42P01",
            action: () => runQuery(create_table_query).then(continuation),
        })

        const catchDuplicateKeyAndThen = continuation =>
        ({
            code: "23505",
            action: continuation,
        })

        const set_insert_query = `insert into kv (key, value) values ('${k}', '${v}')`
        const set_update_query = `UPDATE kv SET value = '${v}' WHERE key = '${k}'`

        const DBResponse = await runQuery(set_insert_query)
            .catch(makeErrorHandler([
                recoverFromMissingTableAndThen(() => runQuery(set_insert_query)),
                catchDuplicateKeyAndThen(() => runQuery(set_update_query)),
            ]))

        await client.end()
    }

    async teardown()
    {

    }
}

module.exports = KV;
