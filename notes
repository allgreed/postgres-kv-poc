- add model based tests and see if the find anything interesting (different table between reruns?)
- https://github.com/dubzzz/fast-check/blob/master/documentation/1-Guides/Tips.md
- commit

============

- fix connecting to postgres and pass connection string / pass to new KV
- handle missing db
- handle db starting up
- validate kv name as well?
- commit

- document the fact that input keys are strings, and values are objects that must serialize to JSON (except for some values)
- document the null semantics - putting null is the same as deleting a key
- should model validate keys?
- commit

- add README & LICENSE (WTFPL)
- document direnv
- commit 

- add Makefile + document it
- commit

- make npm package? :D

============

- add Redis kv implementation (in benchmakr)
- https://www.npmjs.com/package/redis-json
- write tests
- see if it passes the tests
- commit

- design a performance test upon an API
- do a benchmark (few use cases, ideally fully automated)
- commit

- do a performance test of current implementation

============

Optimize (do a performance tests after each):
- first try update, than try inser ton set
- LIMIT 1 to select query (does it work on update query as well?)
- where like vs where = 
- with hash index on key
- use connection pool // https://node-postgres.com/features/pooling
- use prepared statements // https://node-postgres.com/features/queries#prepared-statements
- using row mode to get few milis on the parser //  https://node-postgres.com/features/queries#row-mode
- using native client // https://node-postgres.com/features/native
- upsert maybe? // http://www.postgresqltutorial.com/postgresql-upsert/

============

- add unit tests
- add cleanup query (delte null keys)
- parametrize PGDB name - connection string
- commit

============

- Maybe have some fun with multithreading? :D (running more than a single kv instance)
- Migrate to cocroachDB
