- parametrize PGDB name, kvDB name and owner - connection string, extract owner from the currently created user
- commit

- add extensive tests (ideally property based - no idea is there a point to test it in other way)
- commit

- document the fact that keys are strings, and values are arbitrary jsons - maybe types? :D
- document the null semantics - putting null is the same as deleting a key
- add cleanup query

- handle missing db
- handle db starting up
- commit

- add README & LICENSE (WTFPL)
- document direnv
- commit 

- add Makefile + document it
- commit

- make npm package? :D

- add Redis kv implementation (in benchmakr)
- https://www.npmjs.com/package/redis-json
- make it pass the tests
- commit

- design a performance test upon an API
- do a benchmark (few use cases, ideally fully automated)
- commit

- do a performance test of current implementation

Optimize (do a performance tests after each):
- first try update, than try inser ton set
- LIMIT 1 to select query (does it work on update query as well?)
- where like vs where = 
- with hash index on key
- use connection pool // https://node-postgres.com/features/pooling
- use prepared statements // https://node-postgres.com/features/queries#prepared-statements
- using row mode to get few milis on the parser //  https://node-postgres.com/features/queries#row-mode
- using native client // https://node-postgres.com/features/native
- upsert maybe? // http://www.postgresqltutorial.com/postgresql-upsert/


https://node-postgres.com/features/queries#types <- for supporting non-string types

- Maybe have some fun with multithreading? :D (running more than a single kv instance)

- Migrate to cocroachDB
